package com.speechlesscompany.compasskoala.ui.features.guide.ui

import android.Manifest
import android.graphics.Bitmap
import androidx.camera.core.ImageCapture
import androidx.camera.core.ImageCapture.OnImageCapturedCallback
import androidx.camera.core.ImageCaptureException
import androidx.camera.core.ImageProxy
import androidx.camera.view.PreviewView
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.BoxScope
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.navigationBarsPadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.requiredHeightIn
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Button
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.viewinterop.AndroidView
import com.google.accompanist.permissions.ExperimentalPermissionsApi
import com.google.accompanist.permissions.rememberPermissionState
import com.speechlesscompany.compasskoala.ui.styles.CompassKoalaTheme
import com.speechlesscompany.compasskoala.ui.styles.Dimen
import com.speechlesscompany.compasskoala.ui.utils.CameraUtils.getCameraProvider
import com.speechlesscompany.compasskoala.ui.utils.CameraUtils.getImageCapture
import com.speechlesscompany.compasskoala.ui.utils.CameraUtils.setCamera
import com.speechlesscompany.compasskoala.ui.utils.PermissionUtils.canAccessCamera
import java.util.concurrent.Executors

@OptIn(ExperimentalPermissionsApi::class)
@Composable
internal fun GuideScreen(viewModel: GuideViewModel) {
    val context = LocalContext.current
    val generated by viewModel.generated.collectAsState()
    var isCameraPermission by remember { mutableStateOf(canAccessCamera(context)) }
    val launcher = rememberPermissionState(permission =  Manifest.permission.CAMERA) {
        isCameraPermission = it
    }

    LaunchedEffect(Unit) {
        if (!isCameraPermission) {
            launcher.launchPermissionRequest()
        }
    }

    if (isCameraPermission) {
        GuideContent(
            generated = generated,
            onImageCapture = { image ->
                viewModel.getImageDescription(image)
            }
        )
    }
}

@Composable
internal fun GuideContent(
    generated: String,
    onImageCapture: (image: Bitmap) -> Unit
) {
    val context = LocalContext.current
    val owner = LocalLifecycleOwner.current
    val preview = remember { PreviewView(context) }
    val capture = remember { getImageCapture() }

    LaunchedEffect(Unit) {
        val provider = getCameraProvider(context)

        setCamera(
            owner = owner,
            provider = provider,
            view = preview,
            capture = capture
        )
    }

    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        Box(
            modifier = Modifier
                .weight(1F)
                .fillMaxWidth()
        ) {
            AndroidView(
                modifier = Modifier.fillMaxSize(),
                factory = { preview }
            )
            CaptureButton(
                capture = capture,
                onImageCapture = onImageCapture
            )
        }
        BottomSheet(generated = generated)
    }
}

@Composable
private fun BoxScope.CaptureButton(
    capture: ImageCapture,
    onImageCapture: (image: Bitmap) -> Unit
) {
    val executor = remember { Executors.newSingleThreadExecutor() }

    DisposableEffect(Unit) {
        onDispose {
            executor.shutdown()
        }
    }

    Button(
        modifier = Modifier
            .padding(Dimen.ui4)
            .align(Alignment.BottomCenter),
        onClick = {
            capture.takePicture(executor, object : OnImageCapturedCallback() {
                override fun onCaptureSuccess(image: ImageProxy) {
                    val bitmap = image.toBitmap()

                    onImageCapture.invoke(bitmap)
                }

                override fun onError(error: ImageCaptureException) {
                    // insert your code here.
                }
            })
        }
    ) {
        Text(text = "Capturar")
    }
}

@Composable
private fun BottomSheet(generated: String) {
    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .requiredHeightIn(max = Dimen.ui40)
            .navigationBarsPadding(),
        color = CompassKoalaTheme.colors.primary,
        shadowElevation = Dimen.ui1
    ) {
        Column(
            modifier = Modifier
                .padding(top = Dimen.ui2)
                .padding(horizontal = Dimen.ui4)
                .fillMaxWidth(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(Dimen.ui3)
        ) {
            Box(
                modifier = Modifier
                    .height(Dimen.ui05)
                    .width(Dimen.ui4)
                    .background(CompassKoalaTheme.colors.primaryVariantLight, CircleShape)
            )
            LazyColumn(
                modifier = Modifier
                    .padding(top = Dimen.ui2, bottom = Dimen.ui2)
                    .fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                item {
                    Text(
                        text = generated,
                        color = CompassKoalaTheme.colors.secondary,
                        fontWeight = FontWeight.Normal,
                        style = CompassKoalaTheme.typography.h2,
                        overflow = TextOverflow.Ellipsis
                    )
                }
            }
        }
    }
}
